# Windows 10
# python : 3.7.16
# pandas : 1.3.5
# numpy : 1.19.5
# catboost : 1.0.6
# sklearn : 0.23.2
import random
import os

import pandas as pd
import numpy as np

from sklearn.preprocessing import OneHotEncoder
from sklearn.preprocessing import RobustScaler
from catboost import CatBoostClassifier



seed = 42

def seed_everything(seed):
    random.seed(seed)
    os.environ['PYTHONHASHSEED'] = str(seed)
    np.random.seed(seed)
def DropNA(train_X, test):
    train_X.dropna(axis=1, how='all', inplace=True)
    test = test[train_X.columns]
    return train_X, test

def DropDuplicateColumns(train_X, test): #중복컬럼 제거
    train_X = train_X.T.drop_duplicates(keep='first').T
    test = test[train_X.columns]
    return train_X, test

def RemoveOneValueColumn(train_X, test): #하나의 값만 가진 열 제거
    for col in [x for x in train_X.columns if 'X_' in x]:
        if len(train_X[col].value_counts())==1:
            train_X.drop(col, axis=1, inplace=True)
        
    test = test[train_X.columns]
    return train_X, test

def CombineLineProduct(train_X, test): #제품에서 라인이 같은것 묶기!
    target_col = ['PRODUCT_CODE','LINE']
    new_col = 'PROD_CODE_AND_LINE'
    train_X[new_col] = train_X['PRODUCT_CODE']+train_X['LINE']
    train_X.drop(target_col,axis=1, inplace=True)
    test[new_col] = test['PRODUCT_CODE']+test['LINE']
    test.drop(target_col,axis=1, inplace=True)
    return train_X, test, new_col

def OnehotEncod(train_X, test, new_col):#원핫인코딩
    ohe = OneHotEncoder(sparse=False)
    ohe.fit(train_X[new_col].values.reshape(-1,1))
    one_hot_encoded_train = ohe.transform(train_X[new_col].values.reshape(-1,1))
    for label in np.unique(test[new_col]):
        if label not in ohe.categories_[0]: 
                ohe.classes_[0] = ohe.append(ohe.categories_[0], label)
    one_hot_encoded_test = ohe.transform(test[new_col].values.reshape(-1,1))
    ohe_train = pd.DataFrame(one_hot_encoded_train, columns = ohe.categories_[0])
    ohe_test = pd.DataFrame(one_hot_encoded_test, columns = ohe.categories_[0])
    ohe_train = ohe_train.astype(int)
    ohe_test = ohe_test.astype(int)
    train_X.drop(columns=[new_col], axis=1, inplace=True)
    test.drop(columns=[new_col], axis=1, inplace=True)
    train_X = pd.concat([train_X, ohe_train], axis=1)
    test = pd.concat([test, ohe_test], axis=1)
    
    return train_X, test

def fillNaN(train_X, test): #결측치 처리
    train_X = train_X.fillna(0)
    test = test.fillna(0)
    return train_X, test

def scalingRobust(train_X, test): #스케일링
    scaler = RobustScaler()
    target_col = list(filter(lambda x: x.startswith('X_'), train_X.columns))
    scaler.fit(train_X[target_col])
    train_X[target_col] = scaler.transform(train_X[target_col])
    test[target_col] = scaler.transform(test[target_col])
    return train_X, test

def preprocess(train_X, train_y, test):
    train_X, test = DropNA(train_X, test)
    train_X, test = DropDuplicateColumns(train_X, test)
    train_X, test = RemoveOneValueColumn(train_X, test)
    train_X, test, new_col = CombineLineProduct(train_X, test)
    train_X, test = OnehotEncod(train_X, test, new_col)
    train_X, test = fillNaN(train_X, test)
    train_X, test = scalingRobust(train_X, test)
    return train_X.values, train_y.values, test.values

def main():
    seed_everything(seed)
    train_df = pd.read_csv('data/open/train.csv')
    test_df = pd.read_csv('data/open/test.csv')

    train_X = train_df.drop(columns=['PRODUCT_ID','Y_Class','Y_Quality','TIMESTAMP'])
    train_y = train_df['Y_Class']
    test = test_df.drop(columns=['PRODUCT_ID', 'TIMESTAMP'])

    train_X, train_y, test = preprocess(train_X, train_y, test)
    cat = CatBoostClassifier(one_hot_max_size=2, random_seed=seed,
                                task_type='GPU', iterations=4500, learning_rate=0.05)
    cat.fit(train_X, train_y, verbose=500)#catboost모델로 선정

    preds = cat.predict(test)
    submit = pd.read_csv('data/open/sample_submission.csv')
    submit['Y_Class'] = preds
    submit.to_csv('submit.csv', index=False)


if __name__ == "__main__": 
    main()
